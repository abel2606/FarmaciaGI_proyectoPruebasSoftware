/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package org.itson.diseñosoftware.farmaciagi.interfaces;

import com.mycompany.farmaciagi_subsistema_compra.GestorCompraProductos;
import com.mycompany.farmaciagi_subsistema_compra.IGestorCompraProductos;
import com.mycompany.farmaciagi_subsistema_compra_excepciones.GestorCompraProductosException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.itson.disenosoftware.farmaciagi_dtos.ProductoDTO;
import org.itson.disenosoftware.farmaciagi_dtos.ProveedorDTO;
import org.itson.disenosoftware.farmaciagi_subsistema_proveedores.GestorProveedores;
import org.itson.disenosoftware.farmaciagi_subsistema_proveedores.IGestorProveedores;

/**
 *
 * @author Enrique Rodriguez
 */
public class DlgOpcionesProveedores extends javax.swing.JDialog {

    private IGestorProveedores gestorProveedores;
    private List<ProveedorDTO> proveedores;
    private IGestorCompraProductos gestorCompras;
    private ProductoDTO productoSeleccionado;

    /**
     * Método constructor del DLG que inicializa diferentes gestores y atributos.
     * 
     * @param productoSeleccionado ProductoDTO
     */
    public DlgOpcionesProveedores(ProductoDTO productoSeleccionado) {
        initComponents();
        this.productoSeleccionado = productoSeleccionado;
        this.gestorProveedores = new GestorProveedores();
        this.gestorCompras = new GestorCompraProductos();
        this.proveedores = new LinkedList<>();
        llenarTabla();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProveedores = new javax.swing.JTable();
        btnSeleccionar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(216, 215, 255));

        tblProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblProveedores);

        btnSeleccionar.setBackground(new java.awt.Color(166, 164, 255));
        btnSeleccionar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnSeleccionar.setForeground(new java.awt.Color(255, 255, 255));
        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(166, 164, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 118, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSeleccionar, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(87, 87, 87))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(btnSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        int filaSeleccionada = tblProveedores.getSelectedRow();
        if (tblProveedores.isRowSelected(filaSeleccionada)) {
            seleccionarProveedor();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Seleccione un proveedor");
        }

    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Método de llenado de tabla, dependiendo del producto que tiene la clase
     * establecido en su atributo productoSeleccionado
     */
    public void llenarTabla() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();

            modelo.addColumn("NOMBRE");
            modelo.addColumn("DIRECCION");
            modelo.addColumn("CONTACTO");
            modelo.addColumn("RFC");

            proveedores = gestorCompras.encontrarProveedores(productoSeleccionado);

            if (!proveedores.isEmpty()) {
                this.setVisible(true);
                for (ProveedorDTO proveedor : proveedores) {

                    List<String> telefonosExistentes = proveedor.getTelefonos();
                    StringBuilder telefonos = new StringBuilder();
                    for (String telefonosExistente : telefonosExistentes) {
                        telefonos.append(telefonosExistente).append(",");
                    }
                    if (telefonos.length() > 0) {
                        telefonos.delete(telefonos.length() - 1, telefonos.length());
                    }

                    Object[] fila = {
                        proveedor.getNombre(),
                        proveedor.getDireccion().getCalle() + ","
                        + //TODO: Pensar si esto va de esta forma
                        proveedor.getDireccion().getColonia() + ","
                        + proveedor.getDireccion().getNumero() + ","
                        + proveedor.getDireccion().getCodigo_postal() + ","
                        + proveedor.getDireccion().getCiudad(),
                        telefonos.toString(),
                        proveedor.getRfc()
                    };
                    modelo.addRow(fila);
                    tblProveedores.setModel(modelo);
                    TableColumnModel columnModel = tblProveedores.getColumnModel();
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Sin proveedores de momento");
                this.dispose();
            }

        } catch (GestorCompraProductosException ex) {
            Logger.getLogger(DlgOpcionesProveedores.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Método para seleccionar a un proveedor.
     *
     */
    private void seleccionarProveedor() {
        try {
            int filaSeleccionada = tblProveedores.getSelectedRow();
            proveedores = gestorCompras.encontrarProveedores(productoSeleccionado);
            proveedores.get(filaSeleccionada);
            if (filaSeleccionada != -1) {
                ProveedorDTO proveedorSeleccionado = proveedores.get(filaSeleccionada);
                DlgRealizarCompra on = new DlgRealizarCompra(proveedorSeleccionado, productoSeleccionado);
                on.setVisible(true);
                this.dispose();
            }

        } catch (GestorCompraProductosException ex) {
            Logger.getLogger(DlgOpcionesProveedores.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProveedores;
    // End of variables declaration//GEN-END:variables
}
